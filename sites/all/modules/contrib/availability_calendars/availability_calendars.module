<?php
/**
 * @file
 * Availability Calendars module. Allows for availability information to be
 * displayed using calendars on specified content types.
 *
 * Originally based on the Availability Module.
 *
 * This file contains the hooks and other functions that must be present in the .module file
 *
 * @author Dan Karran (geodaniel) <dan at karran dot net>
 * @author Nicholas Alipaz (nicholas.alipaz)
 * @author Erwin Derksen (http://drupal.org/user/750928)
 */

/**
 * Implements hook_init().
 * @see http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_init/6
 * Currently just adds our css/js files to pages.
 */
function availability_calendars_init() {
  // CSS is added to all pages to allow for aggregation
  // Base css
  drupal_add_css(drupal_get_path('module', 'availability_calendars') . '/availability_calendars.base.css');
  // Generated CSS
  $file = file_directory_path() . '/availability_calendars/availability_calendars.css';
  if (is_readable($file)) {
    drupal_add_css($file);
  }
}

/**
 * Implements hook_menu().
 * @see http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_menu/6
 */
function availability_calendars_menu() {
  $items = array();
  $items['admin/settings/availability-calendars'] = array(
    'title' => 'Availability Calendars',
    'description' => 'Configure global settings for availability calendars module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('availability_calendars_admin_settings'),
    'access arguments' => array('edit availability calendars'),
    'file' => 'availability_calendars.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/settings/availability-calendars/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/settings/availability-calendars/styling'] = array(
    'title' => 'Styling',
    'description' => 'Define CSS styles for Availability Calendars.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('availability_calendars_styles'),
    'access arguments' => array('edit availability calendars'),
    'file' => 'availability_calendars.styles.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['availability-calendars/%'] = array(
    'title' => 'Availability calendar',
    'page callback' => 'availability_calendars_page',
    'page arguments' => array(1),
    'access callback' => 'availability_can_edit',
    'access arguments' => array(1),
    'file' => 'availability_calendars.node.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_perm().
 * @see http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_perm/6
 */
function availability_calendars_perm() {
  return array('edit own availability calendars', 'edit availability calendars');
}

/**
 * A callback function to see if user should be allowed to edit the calendar.
 *
 * @global object $user
 * @param int $nid
 * @return boolean
 */
function availability_can_edit($nid = NULL) {
  if ($nid !== NULL) {
    if (user_access('edit availability calendars')) {
      return TRUE;
    }
    elseif (user_access('edit own availability calendars')) {
      $node = node_load($nid);
      if ($node) {
        global $user;
        return $user->uid == $node->uid;
      }
    }
  }
  return FALSE;
}

/**
 * Implements hook_theme().
 * @see http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_theme/6
 */
function availability_calendars_theme() {
  $today = getdate();
  return array(
    'availability_calendars_node' => array(
      'arguments' => array(
        'node' => NULL,
        'year' => $today['year'],
        'month' => $today['mon'],
        'monthstodisplay' => 12,
      ),
      'file' => 'availability_calendars.page.inc',
    ),
    'availability_calendars_month' => array(
      'arguments' => array(
        'node' => NULL,
        'year' => $today['year'],
        'month' => $today['mon'],
        'settings' => NULL,
      ),
      'file' => 'availability_calendars.page.inc',
    ),
    'availability_calendars_key' => array(
      'arguments' => array(),
      'file' => 'availability_calendars.page.inc',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for FORM_ID = 'node_type_form' (i.e. the edit content type form).
 * @see http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_form_FORM_ID_alter/6
 */
function availability_calendars_form_node_type_form_alter(&$form, &$form_state) {
  module_load_include('inc', 'availability_calendars', 'availability_calendars.admin');
  return availability_calendars_admin_form_node_type_form_alter($form, $form_state);
}

/**
 * Implements hook_form_alter(). Alters node edit forms for supported content types
 * @see http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_form_alter/6
 */
function availability_calendars_form_alter(&$form, &$form_state, $form_id) {
  // Alter node edit form if availability support is enabled for that content type
  if (availability_calendars_override_per_node()
      && isset($form['type']['#value'])
      && $form['type']['#value'] . '_node_form' == $form_id
      && availability_calendars_is_supported_type($form['type']['#value'])) {
    module_load_include('inc', 'availability_calendars', 'availability_calendars.node');
    return availability_calendars_node_form_alter($form, $form_state, $form_id);
  }
}

/**
 * Implements D6 hook_nodeapi(): forward to D7 hook_node_$op().
 * @see http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_nodeapi/6
 */
function availability_calendars_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (availability_calendars_is_supported_type($node->type)) {
    switch ($op) {
      case 'view':
        availability_calendars_node_view($node, $a3 ? 'teaser' : 'full');
        break;
      case 'insert':
        availability_calendars_node_insert($node);
        break;
      case 'update':
        availability_calendars_node_update($node);
        break;
      case 'delete':
        availability_calendars_node_delete($node);
        break;
    }
  }
}

/**
 * Implements D7 hook_node_view.
 * @see http://api.drupal.org/api/drupal/modules--node--node.api.php/function/hook_node_view/7
 */
function availability_calendars_node_view($node, $view_mode = 'full', $langcode = NULL) {
  if (availability_calendars_is_supported_type($node->type)) {
    module_load_include('inc', 'availability_calendars', 'availability_calendars.page');
    availability_calendars_node_node_view($node, $view_mode);
  }
}

/**
 * Implements D7 hook_node_insert.
 * @see http://api.drupal.org/api/drupal/modules--node--node.api.php/function/hook_node_insert/7
 */
function availability_calendars_node_insert($node) {
  if (availability_calendars_override_per_node() && availability_calendars_is_supported_type($node->type)) {
    module_load_include('inc', 'availability_calendars', 'availability_calendars.node');
    availability_calendars_save_node_settings($node);
  }
}

/**
 * Implements D7 hook_node_update.
 * @see http://api.drupal.org/api/drupal/modules--node--node.api.php/function/hook_node_update/7
 */
function availability_calendars_node_update($node) {
  if (availability_calendars_override_per_node() && availability_calendars_is_supported_type($node->type)) {
    module_load_include('inc', 'availability_calendars', 'availability_calendars.node');
    availability_calendars_save_node_settings($node);
  }
}

/**
 * Implements D7 hook_node_delete.
 * @see http://api.drupal.org/api/drupal/modules--node--node.api.php/function/hook_node_delete/7
 */
function availability_calendars_node_delete($node) {
  if (availability_calendars_is_supported_type($node->type)) {
    module_load_include('inc', 'availability_calendars', 'availability_calendars');
    availability_calendars_delete_node($node->nid);
  }
}

/**
 * Implements D6 hook_block(): forward to D7 hook_block_$op().
 * Generates a block for the legend that can be shown when on availability calendar nodes.
 * @see http://api.drupal.org/api/drupal/developer--hooks--core.php/function/hook_block/6
 */
function availability_calendars_block($op = 'list', $delta = 0, $edit = array()) {
  // The $op parameter determines what piece of information is being requested.
  switch ($op) {
    case 'list':
      return availability_calendars_block_info();
    case 'view':
      return availability_calendars_block_view($delta);
  }
}

/**
 * Implements D7 hook_block_info().
 * @see http://api.drupal.org/api/drupal/modules--block--block.api.php/function/hook_block_info/7
 */
function availability_calendars_block_info() {
  $blocks = array(
    'key' => array(
      'info' => t('Availability Calendar Key'),
      'cache' => BLOCK_CACHE_GLOBAL,
    ),
  );
  return $blocks;
}

/**
 * Implements D7 hook_block_view().
 * @see http://api.drupal.org/api/drupal/modules--block--block.api.php/function/hook_block_view/7
 */
function availability_calendars_block_view($delta = '') {
  if ($delta == 'key') {
    $block = array(
      'subject' => t('Availability Key'),
      'content' => theme('availability_calendars_key'),
    );
    return $block;
  }
}

/**
 * Indicates whether overriding settings on a per node basis is allowed.
 *
 * @return boolean
 */
function availability_calendars_override_per_node() {
  return variable_get('availability_calendars_settings_system_pernodeoverride', 0) != 0;
}

/**
 * Indicates whether the given content type supports availability calendars.
 *
 * @param string $type
 * @return boolean
 */
function availability_calendars_is_supported_type($type) {
  return variable_get('availability_calendars_settings_system-type_' . $type, 0) != 0;
}
